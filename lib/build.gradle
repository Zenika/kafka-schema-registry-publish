import groovy.json.JsonSlurper

plugins {
    id 'java-library'
    id 'com.github.davidmc24.gradle.plugin.avro' version '1.3.0'
    id 'maven-publish'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.avro:avro:1.11.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
}

tasks.named('test') {
    useJUnitPlatform()
}

sourceSets {
    main {
        resources {
            srcDirs 'src/main/avro'
        }
    }
}

avro {
    stringType = "CharSequence"
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'com.zenika'
            artifactId = 'screening-schemas'
            version = "0.1-SNAPSHOT"
            from components.java

            pom {
                name = 'Screening schemas'
                description = 'Screening avro schemas'
            }
        }
    }

    repositories {
        maven {
            def defaultNexusRepositoryURL = "http://nexus:8081/repository/kafka/"
            def nexusRepository = System.getenv("NEXUS_REPOSITORY") ?: defaultNexusRepositoryURL
            def nexusUsername = System.getenv("NEXUS_CREDS_USR") ?: "kafka"
            def nexusPassword = System.getenv("NEXUS_CREDS_PSW") ?: "kafka"

            credentials {
                username = nexusUsername
                password = nexusPassword
            }

            url = nexusRepository
            allowInsecureProtocol = true
        }
    }
}

tasks.register("publishSchemas") {
    doLast {
        def schemas = [
                [subject: 'screening-key',
                 file   : 'screeningId.avsc'],
                [subject: 'screening-value',
                 file   : 'screening.avsc']
        ]
        schemas.each { registerSchema(it) }
    }
}

def registerSchema(schema) {
    println "Registering the schema ${schema.file}"
    def schemaDefinition = createSchemaDefinition(schema)
    registerSchemaInRegistry(schema, schemaDefinition)
}

def createSchemaDefinition(schema) {
    def path = project.sourceSets.main.allSource.srcDirs.findAll { it.name.endsWith('avro') }[0].absolutePath
    def schemaDefinition = [schema: new File("$path/${schema.file}").text]
    return schemaDefinition
}


def registerSchemaInRegistry(schema, schemaDefinition) {
    def request = configureRequestMethodAndHeaders(schema)
    writeRequest(request, groovy.json.JsonOutput.toJson(schemaDefinition))
    def responseBody = readResponseBody(request)
    if(isResponse200(request)) {
        println("The schema ${schema.file} was published with the subject ${schema.subject} with the id ${responseBody.id}")
    } else {
        throw new RuntimeException("Unable to publish the schema ${schema.file} in the registry: ${responseBody.message}")
    }
}
def configureRequestMethodAndHeaders(schema) {
    def defaultSchemaRegistryURL = "http://schema-registry:8081"
    def schemaRegistryURL = System.getenv("SCHEMA_REGISTRY_URL") ?: defaultSchemaRegistryURL
    def request = new URL("$schemaRegistryURL/subjects/${schema.subject}/versions").openConnection()
    request.setRequestMethod('POST')
    request.setDoOutput(true)
    request.setRequestProperty('Content-Type', 'application/json')
    request.setRequestProperty('Accept', 'application/json')
    return request
}

void writeRequest(request, payload) {
    request.getOutputStream().write(payload.getBytes('UTF-8'))
}

def readResponseBody(request) {
    def jsonSlurper = new groovy.json.JsonSlurper()
    if(request.getResponseCode() == 200) {
        return jsonSlurper.parseText(request.getInputStream().getText())
    } else {
        return jsonSlurper.parseText(request.getErrorStream().getText())
    }
}

def isResponse200(request) {
    return request.getResponseCode() == 200
}
